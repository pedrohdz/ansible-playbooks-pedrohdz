#! /bin/bash

set -o errexit
set -o pipefail
set -o nounset

#------------------------------------------------------------------------------
# Configure & sanity check
#------------------------------------------------------------------------------
PROJECT_DIR="$(builtin cd -- "$(dirname -- "${BASH_SOURCE[0]}")/.." &> /dev/null && pwd)"
echo "++ INFO - Setting up the project in: $PROJECT_DIR"

if [ -e "${PROJECT_DIR}/.venv" ]; then
  echo "++ ERROR - Already exists: ${PROJECT_DIR}/.venv"
  exit 1
fi

#------------------------------------------------------------------------------
# Pick Python version
#------------------------------------------------------------------------------
if [ "${PYTHON:-}" ]; then
  true # NOP
elif [ -x /opt/local/bin/python3 ]; then
  PYTHON=/opt/local/bin/python3
else
  PYTHON=/usr/bin/python3
fi

set -o xtrace


#------------------------------------------------------------------------------
# Setup Python venv
#------------------------------------------------------------------------------
"$PYTHON" -m venv "${PROJECT_DIR}/.venv"

set +o xtrace
# shellcheck disable=SC1091  # File needs to be generated by venv.
source "${PROJECT_DIR}/.venv/bin/activate"
set -o xtrace
pip3 install --upgrade --upgrade-strategy eager pip setuptools wheel
pip3 install --requirement "${PROJECT_DIR}/requirements.txt"


#------------------------------------------------------------------------------
# Record versions
#------------------------------------------------------------------------------
which "$PYTHON"
"$PYTHON" --version

which ansible ansible-lint molecule yamllint ansible-galaxy
ansible --version
ansible-galaxy --version
ansible-lint --version
molecule --version
yamllint --version
pip3 freeze


#------------------------------------------------------------------------------
# Ansible setup
#------------------------------------------------------------------------------
ansible-galaxy install -r requirements.yml
